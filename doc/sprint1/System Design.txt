1. High-Level Description of Classes Using CRC Cards

Class Name: SearchEngine
Parent Class: None
Subclasses: SourceHandler, QueryProcessor

Responsibilities:
Manage user search requests.
Delegate queries to relevant data sources.
Aggregate results from multiple sources.

Collaborators:
SourceHandler: Handles individual sources like CNN, BBC, Reuters.
QueryProcessor: Parses user queries and formats them for processing.


Class Name: SourceHandler
Parent Class: None
Subclasses: CNNHandler, BBCHandler, ReutersHandler

Responsibilities:
Interface with specific news sources (e.g., CNN).
Fetch and normalize data from APIs or web scraping.

Collaborators:
SearchEngine: Receives instructions from the main engine.
DatabaseManager: Saves fetched data for caching.


Class Name: QueryProcessor
Parent Class: None
Subclasses: None

Responsibilities:
Parse user queries for keywords and syntax.
Perform error checking and sanitization.
Prepare queries for execution.

Collaborators:
SearchEngine: Passes queries and receives processed instructions.
SourceHandler: Sends processed queries for data retrieval.


Class Name: DatabaseManager
Parent Class: None
Subclasses: None

Responsibilities:
Interact with the SQLite database for data storage and retrieval.
Manage schema updates and query optimizations.
Handle logging of user search activities.

Collaborators:
SearchEngine: Stores and retrieves search results.
SourceHandler: Caches fetched data.


Class Name: ErrorHandler
Parent Class: None
Subclasses: None

Responsibilities:
Capture and handle system errors (e.g., invalid queries, API failures).
Log errors for debugging and reporting.
Provide user-friendly error messages.

Collaborators:
All other classes.


2. System Interaction with the Environment

-Operating System (OS): Cross-platform (Windows, macOS, Linux).
-Programming Language: Python 3.9+ for the main application.
-Database: SQLite for lightweight storage.
-APIs: REST APIs for external news sources (e.g., CNN, BBC).
-Network Configuration: Requires outbound internet access for querying external APIs.

Other Dependencies:
-Python libraries for web scraping and API integration (requests, beautifulsoup4, etc.).
-Flask framework for serving the search engine.

3. Architecture Overview

Architecture Description:

The system follows a modular client-server design with the following components:
Frontend: Simple user interface to input queries and display results.
Backend Core: Python-based service handling user requests, query processing, and fetching data from sources.
Data Layer: SQLite database for caching data and storing logs.
Source APIs: Interfaces to fetch data from CNN, BBC, Reuters, and other sources.

Architecture Diagram:
+---------------------+
|    User Interface   | <---[Input: Search Query]
+---------------------+
           |
           v
+---------------------+        +----------------+
|    Search Engine    |<----->| Source Handler |
+---------------------+        +----------------+
           |
           v
+---------------------+
|   Database Manager  |
+---------------------+
           |
           v
+---------------------+
|      SQLite DB      |
+---------------------+


4. System Decomposition

+-------------------+-------------------------------------------+-------------------------+
| Component         | Role                                      | Dependencies            |
+-------------------+-------------------------------------------+-------------------------+
| Search Engine     | Central controller for all operations.    | QueryProcessor,         |
|                   |                                           | SourceHandler,          |
|                   |                                           | DatabaseManager         |
+-------------------+-------------------------------------------+-------------------------+
| Source Handler    | Handles individual news APIs.             | APIs for CNN, BBC,      |
|                   |                                           | Reuters.                |
+-------------------+-------------------------------------------+-------------------------+
| Query Processor   | Parses and prepares user queries.         | None                    |
+-------------------+-------------------------------------------+-------------------------+
| Database Manager  | Handles storage and retrieval.            | SQLite DB               |
+-------------------+-------------------------------------------+-------------------------+

5. Error Handling Strategy

Invalid User Input:
-Validation is performed by QueryProcessor.
-Provide descriptive error messages for unsupported queries.

Network Failures:
-Retry failed API requests up to 3 times.
-Use cached data when network access fails.

API Errors:
-Log errors for debugging.
-Display an appropriate fallback message to users.

Database Issues:
-Use a backup SQLite database file in case of corruption.	


















